From 3febb7e9ffaa0c15d16612c7117b1cebc641a6e9 Mon Sep 17 00:00:00 2001
From: Uday Bondhugula <uday@csa.iisc.ernet.in>
Date: Thu, 23 Mar 2017 16:37:57 +0530
Subject: [PATCH 2/2] patch for isl dim-wise single-valued and isl_pw_aff_map

Signed-off-by: Uday Bondhugula <uday@csa.iisc.ernet.in>
---
 include/isl/aff.h |  1 +
 include/isl/map.h |  1 +
 isl_aff.c         | 29 +++++++++++++++++++++++++++++
 isl_map.c         | 26 ++++++++++++++++++++++++++
 4 files changed, 57 insertions(+)

diff --git a/include/isl/aff.h b/include/isl/aff.h
index 2d56ed8..fa08eae 100644
--- a/include/isl/aff.h
+++ b/include/isl/aff.h
@@ -564,6 +564,7 @@ __isl_give isl_printer *isl_printer_print_pw_multi_aff(__isl_take isl_printer *p
 
 __isl_give isl_pw_multi_aff *isl_pw_multi_aff_from_set(__isl_take isl_set *set);
 __isl_give isl_pw_multi_aff *isl_pw_multi_aff_from_map(__isl_take isl_map *map);
+__isl_give isl_pw_aff *isl_pw_aff_from_map_dim(__isl_keep isl_map *map, int pos);
 
 __isl_constructor
 __isl_give isl_pw_multi_aff *isl_pw_multi_aff_read_from_str(isl_ctx *ctx,
diff --git a/include/isl/map.h b/include/isl/map.h
index 81c6f18..ce66ba3 100644
--- a/include/isl/map.h
+++ b/include/isl/map.h
@@ -544,6 +544,7 @@ isl_bool isl_basic_map_is_single_valued(__isl_keep isl_basic_map *bmap);
 isl_bool isl_map_plain_is_single_valued(__isl_keep isl_map *map);
 __isl_export
 isl_bool isl_map_is_single_valued(__isl_keep isl_map *map);
+int isl_map_dim_is_single_valued(__isl_keep isl_map *map, int pos);
 isl_bool isl_map_plain_is_injective(__isl_keep isl_map *map);
 __isl_export
 isl_bool isl_map_is_injective(__isl_keep isl_map *map);
diff --git a/isl_aff.c b/isl_aff.c
index 158033a..b9001c8 100644
--- a/isl_aff.c
+++ b/isl_aff.c
@@ -5038,6 +5038,35 @@ static __isl_give isl_pw_multi_aff *pw_multi_aff_from_map_check_strides(
 	isl_basic_map_free(hull);
 	return pw_multi_aff_from_map_check_div(map);
 }
+/* Create a piecewise quasi affine expression equivalent to a particular
+ * dimension of an isl_map. Return NULL if that is not possible.
+ */
+__isl_give isl_pw_aff *isl_pw_aff_from_map_dim(__isl_keep isl_map *map, int pos)
+{
+    isl_map *tmap;
+    int n_out;
+
+    if (!map) return NULL;
+
+    n_out = isl_map_dim(map, isl_dim_out);
+
+    if (pos < 0 || pos >= n_out) {
+        isl_die(isl_map_get_ctx(map), isl_error_invalid,
+                "dim position out of bounds", return NULL);
+    }
+
+    tmap = isl_map_copy(map);
+    tmap = isl_map_project_out(tmap, isl_dim_out, pos+1, n_out-pos-1);
+    tmap = isl_map_project_out(tmap, isl_dim_out, 0, pos);
+
+    isl_pw_multi_aff *pw_m_aff =  isl_pw_multi_aff_from_map(tmap);
+    isl_pw_aff  *pw_aff = isl_pw_multi_aff_get_pw_aff(pw_m_aff, 0);
+
+    isl_pw_multi_aff_free(pw_m_aff);
+
+    return pw_aff;
+}
+
 
 /* Try and create an isl_pw_multi_aff that is equivalent to the given isl_map.
  *
diff --git a/isl_map.c b/isl_map.c
index a2ba824..0eb6148 100644
--- a/isl_map.c
+++ b/isl_map.c
@@ -10954,6 +10954,32 @@ isl_bool isl_map_is_single_valued(__isl_keep isl_map *map)
 	return sv;
 }
 
+
+/* Check if 'map' is single-valued along a particular dimension */
+int isl_map_dim_is_single_valued(__isl_keep isl_map *map, int pos)
+{
+    int sv, n_out;
+    isl_map *tmap;
+
+    n_out = isl_map_dim(map, isl_dim_out);
+
+    if (pos < 0 || pos >= n_out) {
+        isl_die(isl_map_get_ctx(map), isl_error_invalid,
+			"dim position out of bounds", return 0);
+    }
+
+    tmap = isl_map_project_out(isl_map_copy(map), isl_dim_out,
+            pos+1, n_out-pos-1);
+    tmap = isl_map_project_out(tmap, isl_dim_out, 0, pos);
+
+    sv = isl_map_is_single_valued(tmap);
+    isl_map_free(tmap);
+
+    return sv;
+}
+
+
+
 isl_bool isl_map_is_injective(__isl_keep isl_map *map)
 {
 	isl_bool in;
-- 
2.7.4

